generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Form {
    id          String     @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    content     Json       @default("[]")
    isPublished Boolean    @default(false)
    isCancelled Boolean?   @default(false)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    userId      String     @db.ObjectId
    User        User       @relation(fields: [userId], references: [id])
    Response    Response[]
}

model Response {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    surveyId   String   @db.ObjectId
    survey     Form     @relation(fields: [surveyId], references: [id])
    respondent String // Anonymized identifier (could be IP or a generated token)
    answers    Json
    createdAt  DateTime @default(now())
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?   @unique
    hashedPassword String?
    emailVerified  DateTime?
    image          String?
    forms          Form[]
    accounts       Account[]
    sessions       Session[]
}

model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String  @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
